{"version":3,"sources":["service/utility.ts","service/index.ts","service/observable.ts","components/addTask/index.tsx","components/modal/index.tsx","layout/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useFetch","url","options","a","body","method","fetch","headers","ToDoService","getInstance","instance","then","response","json","notify","Object","values","catch","err","console","log","task","uniqueId","Math","floor","random","id","text","this","observers","fn","push","data","map","observer","filter","todo","AddTask","props","handleChange","handleCreateNewTask","className","onChange","placeholder","onClick","Modal","useState","value","setValue","handleCloseModal","handleUpdateTask","modalItem","modal","newTask","ariaHideApp","contentLabel","isOpen","onAfterOpen","e","target","ListTemplate","lazy","Layout","list","updateList","addTask","showModal","setmodalItem","useEffect","getTaskList","subscribe","unsubscribe","updateTask","event","createNewTask","fallback","handleDeleteTask","deleteTask","handleOpenModal","item","find","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0d95257d.chunk.js","sourcesContent":["interface IFetch {\n  body?: string;\n  method: string;\n}\n\nexport async function useFetch(url: string, options: IFetch) {\n  const {\n    body,\n    method\n  } = options;\n\n  return await fetch(url, {\n    body: body,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    method: method\n  })\n};","/**\n *  All Service and logics here are originally created by\n *  Michael Eze<michaeleze3@gmail.com>\n *  Please do not reproduce\n */\nimport {Observable} from './observable';\nimport { useFetch } from './utility';\n\nclass ToDoService extends Observable {\n  private static instance: ToDoService;\n\n  constructor() {\n    super();\n    this.getInstance();\n    return ToDoService.instance;\n  }\n\n  public async getTaskList() {\n    useFetch('http://localhost:3000/api/tasks', {method: 'GET'})\n      .then(response => response && response.json())\n      .then(response => this.notify(Object.values(response)))\n      .catch(err => {console.log(err)});\n  };\n\n  public async createNewTask(task: string) {\n    const uniqueId = Math.floor(Math.random() * 20);\n    const body =  `{\\\"id\\\":\\\"${uniqueId}\\\",\\\"text\\\":\\\"${task}\\\"}`;\n\n    await useFetch('http://localhost:3000/api/tasks', {body, method: 'POST'});\n  };\n\n  public async updateTask(id: string, text: string) {\n    const body = `{\\\"id\\\":\\\"${id}\\\",\\\"text\\\":\\\"${text}\\\"}`;\n\n   useFetch(`http://localhost:3000/api/tasks/${id}`, {body, method: 'PUT'})\n     .then(response => response && response.json())\n     .then(response => console.log(Object.values(response)))\n  };\n\n  public async deleteTask(id: string, text: string) {\n    const body =  `{\\\"id\\\":\\\"${id}\\\",\\\"text\\\":\\\"${text}\\\"}`;\n\n    await useFetch(`http://localhost:3000/api/tasks/${id}`, {body, method: 'DELETE'});\n  };\n\n  private getInstance() {\n    if (!ToDoService.instance) {\n      ToDoService.instance = this;\n    }\n  }\n}\n\nexport const todo = new ToDoService();","/**\n *  One of my favorite patterns\n *  Code is created by Michael Eze<michaeleze3@gmail.com>\n *  Please do not reproduce\n */\nexport class Observable {\n    private observers = [];\n\n    subscribe (fn: any) {\n        // @ts-ignore\n        this.observers.push(fn);\n    }\n\n    notify (data: any) {\n        // @ts-ignore\n        this.observers.map(observer => observer(data))\n    }\n\n    unsubscribe (fn: any) {\n        return this.observers.filter((observer => observer !== fn ))\n    }\n}","import React from 'react';\nimport './index.css';\nimport {IAddTask} from './index.interface';\nimport {FaPlus} from \"react-icons/fa\";\n\nconst AddTask: React.FC<IAddTask> = (props) => {\n  const {\n    handleChange,\n    handleCreateNewTask,\n  } = props;\n\n  return (\n    <div className=\"add-container\">\n      <div className=\"add-input\">\n        <input className=\"add--input--field\" onChange={handleChange} placeholder='Add new task'/>\n      </div>\n      <div className=\"add-edit\">\n        <button className=\"add-edit--button\" onClick={handleCreateNewTask}>\n          <FaPlus/>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddTask;","import ReactModal from 'react-modal';\nimport React, {useState} from 'react';\nimport {IModal} from './index.interface';\nimport './index.css';\n\nconst Modal: React.FC<IModal> = (props) => {\n  const [value, setValue] = useState<string>();\n  const {\n    handleCloseModal,\n    handleUpdateTask,\n    modalItem,\n    modal,\n  } = props;\n\n  const newTask = {id: modalItem?.id, task: value};\n\n  const Change = (e: any) => {\n    setValue(e.target.value);\n  };\n\n  const handleOnAfterOpen = () => {\n    setValue(modalItem.text);\n  };\n\n  return (\n    <ReactModal\n      ariaHideApp={false}\n      contentLabel=\"Minimal Modal Example\"\n      isOpen={modal}\n      onAfterOpen={handleOnAfterOpen}\n    >\n      <div className=\"modal-content\">\n        <input className=\"modal-input--field\" onChange={Change} value={value}/>\n        <span className=\"modal-text--accept\" onClick={() => handleUpdateTask(newTask)}> Accept </span>\n        <span className=\"modal-text--reject\" onClick={handleCloseModal}> Cancel </span>\n      </div>\n    </ReactModal>\n  )\n}\n\nexport default Modal;","import React, {\n  lazy,\n  Suspense,\n  useEffect,\n  useState,\n} from 'react';\nimport './index.css';\nimport { todo } from \"../service\";\nimport AddTask from \"../components/addTask\";\nimport Modal from \"../components/modal\";\n\nconst ListTemplate = lazy(() => import('../components/list'));\n\nconst Layout: React.FC = () => {\n  const [list, updateList] = useState<Array<{ id: string, text: string }>>([]);\n  const [task, addTask] = useState<string>(null as unknown as string);\n  const [modal, showModal] = useState<boolean>(false);\n  const [modalItem, setmodalItem] = useState<any>();\n\n  useEffect(() => {\n    getTaskList()\n  }, [updateList]);\n\n  const getTaskList = () => {\n    todo.getTaskList();\n    todo.subscribe((data: any) => {\n      updateList(data);\n    });\n\n    todo.unsubscribe(() => {\n      return null\n    });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const text = event.target.value;\n    addTask(text);\n  };\n\n  const handleCreateNewTask = () => {\n    todo.createNewTask(task);\n    getTaskList();\n    addTask('');\n  };\n\n  const handleUpdateTask = (value: any) => {\n    todo.updateTask(value.id, value.task);\n    getTaskList();\n    handleCloseModal();\n    addTask('');\n  };\n\n  const handleDeleteTask = (id: string, text: string) => {\n    todo.deleteTask(id, text);\n    getTaskList();\n  };\n\n  const handleOpenModal = (id: string) => {\n    showModal(true)\n    const item = list.find((item: any) => item.id === id)\n    setmodalItem(item);\n  };\n\n  const handleCloseModal = () => {\n    showModal(false)\n  };\n\n  return (\n    <div className=\"layout-container\">\n      <Modal\n        handleCloseModal={handleCloseModal}\n        handleUpdateTask={handleUpdateTask}\n        modalItem={modalItem}\n        modal={modal}\n      />\n      <div className=\"layout-add\">\n        <AddTask handleChange={handleChange} handleCreateNewTask={handleCreateNewTask}/>\n      </div>\n      <div className=\"layout-list\">\n        <Suspense fallback={<div>Loading...</div>}>\n          <ListTemplate\n            handleDeleteTask={handleDeleteTask}\n            handleOpenModal={handleOpenModal}\n            list={list}\n          />\n        </Suspense>\n      </div>\n    </div>\n  )\n};\n\nexport default Layout;","import React from 'react';\nimport './App.css';\nimport Layout from \"./layout\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n        <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}